service: summerschool
useDotenv: true
configValidationMode: warn

provider:
  name: aws
  stage: ${opt:stage}
  region: ${opt:region}
  deploymentMethod: direct
  runtime: python3.11
  memorySize: 512
  timeout: 5

  stackTags: &TAGS
    Project: "Summer School"
    TaggingVersion: "V1.0"
  
  environment:
    environment: ${self:service}_${self:provider.stage}_
    aws_account_id: { Ref: AWS::AccountId }

  apiGateway:
    shouldStartNameWithService: true
    metrics: true
    apiKeys:
      - name: ${self:service}_${self:provider.stage}_apikey
        description: "Key for ${self:provider.stage}"
    usagePlan:
      throttle:
        burstLimit: 200
        rateLimit: 100
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: "execute-api:Invoke"
        Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"

  logs:
    restApi:
      fullExecutionData: true
      accessLogging: true
      executionLogging: true


package:
  excludeDevDependencies: false
  individually: false
  patterns:
    - "!dependencies/**"
    - "!tmp/**"
    - "!local_bin/**"
    - "!share/**"
    - "!docs/**"
    - "!iam/**"
    - "!images/**"
    - "!serverless_templates/**"
    - "!resources/**"
    - "!venv/**"
    - "!.venv/**"
    - "!node_modules/**"
    - "!.pytest_cache/**"
    - "!cov_html/**"
    - "!.direnv/**"
    - "!aws/**"
    - "!postman/**"
    - assets/**
    - services/**
    - "!**/__pycache__/**"
    - "!local-scripts/**"
    - "!serverless_plugins/**"
    - "!package-lock.json"
    - "!package.json"

plugins:
  - serverless-apigw-binary
  - serverless-cloudformation-sub-variables
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-s3-remover

params:
  default:
    s3LoggingBucket: "summerschool-s3logging"

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 10

  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true

  defaultStage: dev
  defaultRegion: eu-north-1
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}

  remover:
    buckets:
      - ${self:service}-${self:provider.stage}

  apigwBinary:
    types:
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      - text/plain

layers:
  dependencies:
    path: dependencies
    name: ${self:service}_${self:provider.stage}_dependencies
    description: Application dependencies
    compatibleRuntimes:
      - python3.11
    retain: false

functions:
  HelloWorldFunction:
    name: ${self:service}_${self:provider.stage}_hello-world
    description: Hi there!
    handler: services/lambda_hello_world.hello_world_handler
    layers:
      - { Ref: DependenciesLambdaLayer }
    package: {}
    events:
      - http:
          method: GET
          path: /hello
          private: true
    iamRoleStatementsName: ${self:service}_${self:provider.stage}_role_hello-world

  # Write the Lambda function which inserts data in Customers table below. Hint: Check serverless_templates/

  # Write the Lambda function which generates a report based on the data in Customers table below. Hint: Check serverless_templates/

resources:
  Resources:
    APIGWCloudWatchRole: ${file(resources/APIGWCloudWatchRole.yml):ServerlessCloudWatchRole}

    ServerlessDeploymentBucket: ${file(resources/S3.yml):ServerlessDeploymentBucket}
    ServerlessDeploymentBucketPolicy: ${file(resources/S3.yml):ServerlessDeploymentBucketPolicy}

    # Link SummerSchool S3 Bucket and SummerSchool S3 Bucket Policy below. Hint: Check serverless_templates/

    # Link Customers table below. Hint: Check serverless_templates/

